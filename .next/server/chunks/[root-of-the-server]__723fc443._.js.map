{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 186, "column": 0}, "map": {"version":3,"sources":["file:///C:/Projects/ideas_bank/src/lib/db.js"],"sourcesContent":["import mysql from 'mysql2/promise';\nimport dotenv from 'dotenv';\n\ndotenv.config();\n\nconst pool = mysql.createPool({\n  host: process.env.DB_HOST || '127.0.0.1',\n  user: process.env.DB_USER || 'exam_user',\n  password: process.env.DB_PASSWORD || 'exam_password',\n  port: parseInt(process.env.DB_PORT, 10) || 3307,\n  database: process.env.DB_NAME || 'ideas_bank',\n  waitForConnections: true,\n  connectionLimit: 10,\n  queueLimit: 0\n});\n\n(async () => {\n  try {\n    const connection = await pool.getConnection();\n    console.log(`✅ Connected to ${process.env.DB_NAME || 'ideas_bank'} database`);\n    connection.release();\n  } catch (err) {\n    console.error('❌ Database connection failed:', err.message);\n  }\n})();\n\nexport default pool;\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,uIAAA,CAAA,UAAM,CAAC,MAAM;AAEb,MAAM,OAAO,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;IAC5B,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,UAAU,QAAQ,GAAG,CAAC,WAAW,IAAI;IACrC,MAAM,SAAS,QAAQ,GAAG,CAAC,OAAO,EAAE,OAAO;IAC3C,UAAU,QAAQ,GAAG,CAAC,OAAO,IAAI;IACjC,oBAAoB;IACpB,iBAAiB;IACjB,YAAY;AACd;AAEA,CAAC;IACC,IAAI;QACF,MAAM,aAAa,MAAM,KAAK,aAAa;QAC3C,QAAQ,GAAG,CAAC,CAAC,eAAe,EAAE,QAAQ,GAAG,CAAC,OAAO,IAAI,aAAa,SAAS,CAAC;QAC5E,WAAW,OAAO;IACpB,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,iCAAiC,IAAI,OAAO;IAC5D;AACF,CAAC;uCAEc","debugId":null}},
    {"offset": {"line": 218, "column": 0}, "map": {"version":3,"sources":["file:///C:/Projects/ideas_bank/src/app/api/trainee/%5Bid%5D/route.js"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport pool from '@/lib/db';\n\nexport async function GET(request, { params }) {\n  const { id } = await params;\n  try {\n\n    const [trainee] = await pool.query( \n      `SELECT * FROM trainees WHERE id = ?`,\n      [id]\n    );\n\n    if (trainee.length === 0) {\n      return NextResponse.json(\n        { error: 'Trainee not found' },\n        { status: 404 }\n      );\n    }\n\n    // Map the database fields to the expected frontend format\n    const traineeData = {\n      ...trainee[0],\n      // Map internship fields\n      HaveStarted: trainee[0].has_started_internship === 1,\n      AcceptanceLetter: trainee[0].internship_letter_url || '',\n      hascompleted: trainee[0].has_completed_internship === 1,\n      completionLetter: trainee[0].completion_letter_url || ''\n    };\n\n    return NextResponse.json(traineeData);\n\n  } catch (error) {\n    console.error('Get trainee error:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function PUT(request, { params }) {\n  \n  try {\n    const { id } = await params;\n    const data = await request.json();\n\n    const connection = await pool.getConnection();\n    \n    try {\n      await connection.beginTransaction();\n\n      // Update all trainee information in a single query\n      await connection.query(\n        `UPDATE trainees SET \n        nin = ?, date_of_birth = ?,\n        bank_name = ?, account_number = ?, account_name = ?, bvn = ?,\n        has_started_internship = ?, internship_letter_url = ?, \n        has_completed_internship = ?, completion_letter_url = ?\n        WHERE id = ?`,\n        [\n          data.nin, data.date_of_birth,\n          data.bank_name, data.account_number, data.account_name, data.bvn,\n          data.HaveStarted ? 1 : 0, data.AcceptanceLetter,\n          data.hascompleted ? 1 : 0, data.completionLetter,\n          id\n        ]\n      );\n\n      await connection.commit();\n\n      return NextResponse.json(\n        { message: 'Trainee updated successfully' },\n        { status: 200 }\n      );\n\n    } catch (error) {\n      await connection.rollback();\n      throw error;\n    } finally {\n      connection.release();\n    }\n\n  } catch (error) {\n    console.error('Update trainee error:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n\n// export async function POST(request, { params }) {\n//   const { id } = await params;\n  \n//   try {\n//     const data = await request.json();\n//     console.log('Raw POST data received:', JSON.stringify(data, null, 2));\n    \n//     const { bank_name, account_number, account_name, bvn } = data;\n\n//     if (!id) {\n//       console.error('No trainee ID provided');\n//       return NextResponse.json({ error: 'Trainee ID is required' }, { status: 400 });\n//     }\n\n//     console.log('Extracted bank data:', { bank_name, account_number, account_name, bvn });\n//     console.log('Trainee ID from params:', id);\n\n//     // Validate that we have the required bank data\n//     if (!bank_name || !account_number || !account_name || !bvn) {\n//       console.error('Missing required bank fields:', { bank_name, account_number, account_name, bvn });\n//       return NextResponse.json({ error: 'All bank fields are required' }, { status: 400 });\n//     }\n\n//     // First check if the trainee exists\n//     const [existingTrainee] = await pool.query('SELECT id FROM trainees WHERE id = ?', [id]);\n//     console.log('Existing trainee check:', existingTrainee);\n    \n//     if (existingTrainee.length === 0) {\n//       console.error('Trainee not found with ID:', id);\n//       return NextResponse.json({ error: 'Trainee not found' }, { status: 404 });\n//     }\n\n//     console.log('About to execute UPDATE with values:', [bank_name, account_number, account_name, bvn, id]);\n\n//     // Update bank details in the trainees table\n//     const result = await pool.query(\n//       `UPDATE trainees SET \n//        bank_name = ?, account_number = ?, account_name = ?, bvn = ?\n//        WHERE id = ?`,\n//       [bank_name, account_number, account_name, bvn, id]\n//     );\n\n//     console.log('Update result:', JSON.stringify(result[0], null, 2));\n\n//     if (result[0].affectedRows === 0) {\n//       console.error('No rows were affected by the update');\n//       return NextResponse.json({ error: 'Failed to update trainee' }, { status: 500 });\n//     }\n\n//     console.log('Bank details updated successfully for trainee:', id);\n//     return NextResponse.json({ message: 'Bank details updated successfully' }, { status: 200 });\n\n//   } catch (error) {\n//     console.error('Update bank error:', error);\n//     return NextResponse.json({ error: 'Internal server error' }, { status: 500 });\n//   }\n// }\n"],"names":[],"mappings":"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","debugId":null}}]
}