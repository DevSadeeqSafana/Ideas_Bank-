{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 186, "column": 0}, "map": {"version":3,"sources":["file:///C:/Projects/ideas_bank/src/lib/db.js"],"sourcesContent":["import mysql from 'mysql2/promise';\nimport dotenv from 'dotenv';\n\ndotenv.config();\n\nconst pool = mysql.createPool({\n  host: process.env.DB_HOST || '127.0.0.1',\n  user: process.env.DB_USER || 'exam_user',\n  password: process.env.DB_PASSWORD || 'exam_password',\n  port: parseInt(process.env.DB_PORT, 10) || 3307,\n  database: process.env.DB_NAME || 'ideas_bank',\n  waitForConnections: true,\n  connectionLimit: 10,\n  queueLimit: 0\n});\n\n(async () => {\n  try {\n    const connection = await pool.getConnection();\n    console.log(`✅ Connected to ${process.env.DB_NAME || 'ideas_bank'} database`);\n    connection.release();\n  } catch (err) {\n    console.error('❌ Database connection failed:', err.message);\n  }\n})();\n\nexport default pool;\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,uIAAA,CAAA,UAAM,CAAC,MAAM;AAEb,MAAM,OAAO,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;IAC5B,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,UAAU,QAAQ,GAAG,CAAC,WAAW,IAAI;IACrC,MAAM,SAAS,QAAQ,GAAG,CAAC,OAAO,EAAE,OAAO;IAC3C,UAAU,QAAQ,GAAG,CAAC,OAAO,IAAI;IACjC,oBAAoB;IACpB,iBAAiB;IACjB,YAAY;AACd;AAEA,CAAC;IACC,IAAI;QACF,MAAM,aAAa,MAAM,KAAK,aAAa;QAC3C,QAAQ,GAAG,CAAC,CAAC,eAAe,EAAE,QAAQ,GAAG,CAAC,OAAO,IAAI,aAAa,SAAS,CAAC;QAC5E,WAAW,OAAO;IACpB,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,iCAAiC,IAAI,OAAO;IAC5D;AACF,CAAC;uCAEc","debugId":null}},
    {"offset": {"line": 218, "column": 0}, "map": {"version":3,"sources":["file:///C:/Projects/ideas_bank/src/schema/auth.js"],"sourcesContent":["import { z } from 'zod';\n\nexport const registerSchema = z.object({\n  firstName: z.string().min(2, 'First name must be at least 2 characters'),\n  lastName: z.string().min(2, 'Last name must be at least 2 characters'),\n  registrationno: z.string().min(2, 'Invalid Trainee ID'),\n  userType: z.enum(['APPLICANT', 'ADMIN'])\n});\n\nexport const loginSchema = z.object({\n  registrationno: z.string().min(2,'Invalid Trainee ID'),  \n});"],"names":[],"mappings":";;;;AAAA;;AAEO,MAAM,iBAAiB,+KAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACrC,WAAW,+KAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC7B,UAAU,+KAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC5B,gBAAgB,+KAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAClC,UAAU,+KAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAa;KAAQ;AACzC;AAEO,MAAM,cAAc,+KAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAClC,gBAAgB,+KAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAE;AACnC","debugId":null}},
    {"offset": {"line": 240, "column": 0}, "map": {"version":3,"sources":["file:///C:/Projects/ideas_bank/src/lib/cryptoUtil.js"],"sourcesContent":["\nexport function encrypt(text) {\n  return Buffer.from(String(text).toString(), 'utf8').toString('base64');\n}\n\nexport function decrypt(encodedText) {\n  return Buffer.from(encodedText, 'base64').toString('utf8');\n}"],"names":[],"mappings":";;;;AACO,SAAS,QAAQ,IAAI;IAC1B,OAAO,OAAO,IAAI,CAAC,OAAO,MAAM,QAAQ,IAAI,QAAQ,QAAQ,CAAC;AAC/D;AAEO,SAAS,QAAQ,WAAW;IACjC,OAAO,OAAO,IAAI,CAAC,aAAa,UAAU,QAAQ,CAAC;AACrD","debugId":null}},
    {"offset": {"line": 254, "column": 0}, "map": {"version":3,"sources":["file:///C:/Projects/ideas_bank/src/lib/traineeUtils.js"],"sourcesContent":["import { decrypt } from './cryptoUtil';\n\n/**\n * Standardized utility functions for trainee ID handling\n * Addresses inconsistent field mapping across the application\n */\n\n/**\n * Extract trainee ID from various possible field names\n * @param {Object} data - Object that might contain trainee ID in various field names\n * @returns {string|number|null} - Trainee ID or null if not found\n */\nexport function extractTraineeId(data) {\n  if (!data || typeof data !== 'object') {\n    return null;\n  }\n\n  // Try different possible field names in order of preference\n  const possibleFields = [\n    'traineeId',  // Our standardized field name\n    'id',         // Most common\n    'ID',         // Sometimes uppercase\n    'SN',         // Serial Number from database\n    'sn',         // Lowercase version\n    'trainee_sn', // Alternative database field\n    'trainee_id', // Alternative field name\n  ];\n\n  for (const field of possibleFields) {\n    if (data[field] != null && data[field] !== '') {\n      return data[field];\n    }\n  }\n\n  return null;\n}\n\n/**\n * Get trainee ID from URL search params with decryption support\n * @param {URLSearchParams} searchParams - URL search parameters\n * @param {string} paramName - Parameter name to look for (default: 'traineeId')\n * @param {boolean} encrypted - Whether the ID is encrypted (default: false)\n * @returns {string|null} - Trainee ID or null if not found\n */\nexport function getTraineeIdFromParams(searchParams, paramName = 'traineeId', encrypted = false) {\n  if (!searchParams) return null;\n\n  // Try different parameter names\n  const possibleParams = [paramName, 'id', 'traineeId'];\n  \n  for (const param of possibleParams) {\n    const value = searchParams.get(param);\n    if (value) {\n      try {\n        return encrypted ? decrypt(value) : value;\n      } catch (error) {\n        console.error(`Error decrypting trainee ID from param ${param}:`, error);\n        // If decryption fails, try returning the raw value\n        return value;\n      }\n    }\n  }\n\n  return null;\n}\n\n/**\n * Get trainee ID from localStorage with fallback options\n * @returns {string|null} - Trainee ID or null if not found\n */\nexport function getTraineeIdFromStorage() {\n  if (typeof window === 'undefined') return null;\n\n  try {\n    // First try the dedicated traineeId storage\n    const directId = localStorage.getItem('traineeId');\n    if (directId) return directId;\n\n    // Fallback to extracting from stored data\n    const storedData = localStorage.getItem('data');\n    if (storedData) {\n      const parsed = JSON.parse(storedData);\n      return extractTraineeId(parsed);\n    }\n  } catch (error) {\n    console.error('Error reading trainee ID from localStorage:', error);\n  }\n\n  return null;\n}\n\n/**\n * Store trainee ID in localStorage with standardized key\n * @param {string|number} traineeId - Trainee ID to store\n * @param {Object} additionalData - Additional data to store alongside ID\n */\nexport function storeTraineeId(traineeId, additionalData = null) {\n  if (typeof window === 'undefined') return;\n\n  try {\n    if (traineeId != null && traineeId !== '') {\n      localStorage.setItem('traineeId', String(traineeId));\n      \n      if (additionalData) {\n        const existingData = localStorage.getItem('data');\n        const dataToStore = existingData ? \n          { ...JSON.parse(existingData), ...additionalData, traineeId } :\n          { ...additionalData, traineeId };\n        \n        localStorage.setItem('data', JSON.stringify(dataToStore));\n      }\n    }\n  } catch (error) {\n    console.error('Error storing trainee ID:', error);\n  }\n}\n\n/**\n * Validate trainee ID format\n * @param {any} traineeId - ID to validate\n * @returns {boolean} - Whether the ID is valid\n */\nexport function isValidTraineeId(traineeId) {\n  if (traineeId == null || traineeId === '') {\n    return false;\n  }\n\n  const stringId = String(traineeId).trim();\n  \n  // Check if it's a valid number or non-empty string\n  return stringId.length > 0 && !isNaN(Number(stringId));\n}\n\n/**\n * Normalize trainee ID to a consistent format\n * @param {any} traineeId - ID to normalize\n * @returns {number|null} - Normalized ID as number or null if invalid\n */\nexport function normalizeTraineeId(traineeId) {\n  if (!isValidTraineeId(traineeId)) {\n    return null;\n  }\n\n  const numericId = Number(traineeId);\n  return isNaN(numericId) ? null : numericId;\n}\n\n/**\n * Build trainee data object with consistent field mapping\n * @param {Object} rawData - Raw data from API or storage\n * @returns {Object} - Normalized trainee data\n */\nexport function normalizeTraineeData(rawData) {\n  if (!rawData || typeof rawData !== 'object') {\n    return {};\n  }\n\n  const traineeId = extractTraineeId(rawData);\n  \n  return {\n    ...rawData,\n    traineeId: normalizeTraineeId(traineeId),\n    // Ensure consistent field names\n    fullname: rawData.fullname || rawData.FullName || rawData.full_name,\n    registrationno: rawData.registrationno || rawData.registrationNo || rawData.registration_no,\n  };\n}"],"names":[],"mappings":";;;;;;;;;AAAA;;AAYO,SAAS,iBAAiB,IAAI;IACnC,IAAI,CAAC,QAAQ,OAAO,SAAS,UAAU;QACrC,OAAO;IACT;IAEA,4DAA4D;IAC5D,MAAM,iBAAiB;QACrB;QACA;QACA;QACA;QACA;QACA;QACA;KACD;IAED,KAAK,MAAM,SAAS,eAAgB;QAClC,IAAI,IAAI,CAAC,MAAM,IAAI,QAAQ,IAAI,CAAC,MAAM,KAAK,IAAI;YAC7C,OAAO,IAAI,CAAC,MAAM;QACpB;IACF;IAEA,OAAO;AACT;AASO,SAAS,uBAAuB,YAAY,EAAE,YAAY,WAAW,EAAE,YAAY,KAAK;IAC7F,IAAI,CAAC,cAAc,OAAO;IAE1B,gCAAgC;IAChC,MAAM,iBAAiB;QAAC;QAAW;QAAM;KAAY;IAErD,KAAK,MAAM,SAAS,eAAgB;QAClC,MAAM,QAAQ,aAAa,GAAG,CAAC;QAC/B,IAAI,OAAO;YACT,IAAI;gBACF,OAAO,YAAY,CAAA,GAAA,0HAAA,CAAA,UAAO,AAAD,EAAE,SAAS;YACtC,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,CAAC,uCAAuC,EAAE,MAAM,CAAC,CAAC,EAAE;gBAClE,mDAAmD;gBACnD,OAAO;YACT;QACF;IACF;IAEA,OAAO;AACT;AAMO,SAAS;IACd,wCAAmC,OAAO;;;AAkB5C;AAOO,SAAS,eAAe,SAAS,EAAE,iBAAiB,IAAI;IAC7D,wCAAmC;;;AAkBrC;AAOO,SAAS,iBAAiB,SAAS;IACxC,IAAI,aAAa,QAAQ,cAAc,IAAI;QACzC,OAAO;IACT;IAEA,MAAM,WAAW,OAAO,WAAW,IAAI;IAEvC,mDAAmD;IACnD,OAAO,SAAS,MAAM,GAAG,KAAK,CAAC,MAAM,OAAO;AAC9C;AAOO,SAAS,mBAAmB,SAAS;IAC1C,IAAI,CAAC,iBAAiB,YAAY;QAChC,OAAO;IACT;IAEA,MAAM,YAAY,OAAO;IACzB,OAAO,MAAM,aAAa,OAAO;AACnC;AAOO,SAAS,qBAAqB,OAAO;IAC1C,IAAI,CAAC,WAAW,OAAO,YAAY,UAAU;QAC3C,OAAO,CAAC;IACV;IAEA,MAAM,YAAY,iBAAiB;IAEnC,OAAO;QACL,GAAG,OAAO;QACV,WAAW,mBAAmB;QAC9B,gCAAgC;QAChC,UAAU,QAAQ,QAAQ,IAAI,QAAQ,QAAQ,IAAI,QAAQ,SAAS;QACnE,gBAAgB,QAAQ,cAAc,IAAI,QAAQ,cAAc,IAAI,QAAQ,eAAe;IAC7F;AACF","debugId":null}},
    {"offset": {"line": 350, "column": 0}, "map": {"version":3,"sources":["file:///C:/Projects/ideas_bank/src/app/api/auth/route.js"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport pool from \"@/lib/db\";\nimport { loginSchema } from \"@/schema/auth\";\nimport { encrypt } from \"@/lib/cryptoUtil\";\nimport { extractTraineeId, normalizeTraineeData } from \"@/lib/traineeUtils\";\n\nexport async function POST(request) {\n  try {\n    const requestData = await request.json();\n    const validatedData = loginSchema.safeParse(requestData);\n    console.log(\"Login Request:\", requestData);\n\n    if (!validatedData.success) {\n      console.error(\"Validation errors:\", validatedData.error.errors);\n      return NextResponse.json(\n        { error: \"Validation failed\", details: validatedData.error.errors },\n        { status: 400 }\n      );\n    }\n\n    const { registrationno } = validatedData.data;\n\n    const [users] = await pool.query(\n      \"SELECT * FROM trainees WHERE registrationno = ?\",\n      [registrationno]\n    );\n\n    if (users.length === 0) {\n      return NextResponse.json({ error: \"Invalid credentials\" }, { status: 401 });\n    }\n\n    const user = users[0];\n    console.log(\"User data from DB:\", user);\n    \n    // Use standardized trainee ID extraction\n    const userId = extractTraineeId(user);\n    \n    if (!userId) {\n      console.error(\"No ID field found in user data:\", Object.keys(user));\n      return NextResponse.json({ error: \"Invalid user data - missing ID\" }, { status: 500 });\n    }\n\n    // Normalize the user data for consistent field mapping\n    const normalizedUser = normalizeTraineeData(user);\n\n    return NextResponse.json({\n      traineeId: encrypt(String(userId)),\n      FullName: normalizedUser.fullname,\n      info: normalizedUser,\n    });\n  } catch (error) {\n    console.error(\"Login error:\", error);\n    return NextResponse.json({ error: \"Internal server error\" }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;;;;;;AAEO,eAAe,KAAK,OAAO;IAChC,IAAI;QACF,MAAM,cAAc,MAAM,QAAQ,IAAI;QACtC,MAAM,gBAAgB,uHAAA,CAAA,cAAW,CAAC,SAAS,CAAC;QAC5C,QAAQ,GAAG,CAAC,kBAAkB;QAE9B,IAAI,CAAC,cAAc,OAAO,EAAE;YAC1B,QAAQ,KAAK,CAAC,sBAAsB,cAAc,KAAK,CAAC,MAAM;YAC9D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;gBAAqB,SAAS,cAAc,KAAK,CAAC,MAAM;YAAC,GAClE;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,EAAE,cAAc,EAAE,GAAG,cAAc,IAAI;QAE7C,MAAM,CAAC,MAAM,GAAG,MAAM,kHAAA,CAAA,UAAI,CAAC,KAAK,CAC9B,mDACA;YAAC;SAAe;QAGlB,IAAI,MAAM,MAAM,KAAK,GAAG;YACtB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAsB,GAAG;gBAAE,QAAQ;YAAI;QAC3E;QAEA,MAAM,OAAO,KAAK,CAAC,EAAE;QACrB,QAAQ,GAAG,CAAC,sBAAsB;QAElC,yCAAyC;QACzC,MAAM,SAAS,CAAA,GAAA,4HAAA,CAAA,mBAAgB,AAAD,EAAE;QAEhC,IAAI,CAAC,QAAQ;YACX,QAAQ,KAAK,CAAC,mCAAmC,OAAO,IAAI,CAAC;YAC7D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAiC,GAAG;gBAAE,QAAQ;YAAI;QACtF;QAEA,uDAAuD;QACvD,MAAM,iBAAiB,CAAA,GAAA,4HAAA,CAAA,uBAAoB,AAAD,EAAE;QAE5C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,WAAW,CAAA,GAAA,0HAAA,CAAA,UAAO,AAAD,EAAE,OAAO;YAC1B,UAAU,eAAe,QAAQ;YACjC,MAAM;QACR;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gBAAgB;QAC9B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC7E;AACF","debugId":null}}]
}