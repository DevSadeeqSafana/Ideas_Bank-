{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 58, "column": 0}, "map": {"version":3,"sources":["file:///C:/Projects/ideas_bank/src/app/api/trainee/route.js"],"sourcesContent":["export async function POST(request, { params }) {\r\n  const { id } = params;\r\n\r\n  try {\r\n    const data = await request.json();\r\n\r\n    const { bank_name, account_number, account_name, bvn } = data;\r\n\r\n    // Basic validation\r\n    if (!id) {\r\n      return NextResponse.json({ error: 'Trainee ID is required' }, { status: 400 });\r\n    }\r\n\r\n    if (!bank_name || !account_number || !account_name || !bvn) {\r\n      return NextResponse.json({ error: 'All bank fields are required' }, { status: 400 });\r\n    }\r\n\r\n    const connection = await pool.getConnection();\r\n\r\n    try {\r\n      await connection.beginTransaction();\r\n\r\n      // Optional: check if trainee exists\r\n      const [existingTrainee] = await connection.query(\r\n        'SELECT id FROM trainees WHERE id = ?',\r\n        [id]\r\n      );\r\n\r\n      if (existingTrainee.length === 0) {\r\n        await connection.rollback();\r\n        return NextResponse.json({ error: 'Trainee not found' }, { status: 404 });\r\n      }\r\n\r\n      // Update bank info\r\n      const [result] = await connection.query(\r\n        `UPDATE trainees SET \r\n          bank_name = ?, account_number = ?, account_name = ?, bvn = ?\r\n          WHERE id = ?`,\r\n        [bank_name, account_number, account_name, bvn, id]\r\n      );\r\n\r\n      if (result.affectedRows === 0) {\r\n        await connection.rollback();\r\n        return NextResponse.json({ error: 'No trainee updated' }, { status: 500 });\r\n      }\r\n\r\n      await connection.commit();\r\n\r\n      return NextResponse.json(\r\n        { message: 'Trainee updated successfully' },\r\n        { status: 200 }\r\n      );\r\n\r\n    } catch (error) {\r\n      await connection.rollback();\r\n      console.error('Transaction error:', error);\r\n      return NextResponse.json({ error: 'Transaction failed' }, { status: 500 });\r\n    } finally {\r\n      connection.release();\r\n    }\r\n\r\n  } catch (error) {\r\n    console.error('Update trainee error:', error);\r\n    return NextResponse.json(\r\n      { error: 'Internal server error' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAO,eAAe,KAAK,OAAO,EAAE,EAAE,MAAM,EAAE;IAC5C,MAAM,EAAE,EAAE,EAAE,GAAG;IAEf,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAE/B,MAAM,EAAE,SAAS,EAAE,cAAc,EAAE,YAAY,EAAE,GAAG,EAAE,GAAG;QAEzD,mBAAmB;QACnB,IAAI,CAAC,IAAI;YACP,OAAO,aAAa,IAAI,CAAC;gBAAE,OAAO;YAAyB,GAAG;gBAAE,QAAQ;YAAI;QAC9E;QAEA,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,KAAK;YAC1D,OAAO,aAAa,IAAI,CAAC;gBAAE,OAAO;YAA+B,GAAG;gBAAE,QAAQ;YAAI;QACpF;QAEA,MAAM,aAAa,MAAM,KAAK,aAAa;QAE3C,IAAI;YACF,MAAM,WAAW,gBAAgB;YAEjC,oCAAoC;YACpC,MAAM,CAAC,gBAAgB,GAAG,MAAM,WAAW,KAAK,CAC9C,wCACA;gBAAC;aAAG;YAGN,IAAI,gBAAgB,MAAM,KAAK,GAAG;gBAChC,MAAM,WAAW,QAAQ;gBACzB,OAAO,aAAa,IAAI,CAAC;oBAAE,OAAO;gBAAoB,GAAG;oBAAE,QAAQ;gBAAI;YACzE;YAEA,mBAAmB;YACnB,MAAM,CAAC,OAAO,GAAG,MAAM,WAAW,KAAK,CACrC,CAAC;;sBAEa,CAAC,EACf;gBAAC;gBAAW;gBAAgB;gBAAc;gBAAK;aAAG;YAGpD,IAAI,OAAO,YAAY,KAAK,GAAG;gBAC7B,MAAM,WAAW,QAAQ;gBACzB,OAAO,aAAa,IAAI,CAAC;oBAAE,OAAO;gBAAqB,GAAG;oBAAE,QAAQ;gBAAI;YAC1E;YAEA,MAAM,WAAW,MAAM;YAEvB,OAAO,aAAa,IAAI,CACtB;gBAAE,SAAS;YAA+B,GAC1C;gBAAE,QAAQ;YAAI;QAGlB,EAAE,OAAO,OAAO;YACd,MAAM,WAAW,QAAQ;YACzB,QAAQ,KAAK,CAAC,sBAAsB;YACpC,OAAO,aAAa,IAAI,CAAC;gBAAE,OAAO;YAAqB,GAAG;gBAAE,QAAQ;YAAI;QAC1E,SAAU;YACR,WAAW,OAAO;QACpB;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO,aAAa,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}