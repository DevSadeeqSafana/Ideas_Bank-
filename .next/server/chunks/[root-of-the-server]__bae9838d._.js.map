{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 186, "column": 0}, "map": {"version":3,"sources":["file:///C:/Projects/ideas_bank/src/lib/db.js"],"sourcesContent":["import mysql from 'mysql2/promise';\nimport dotenv from 'dotenv';\n\ndotenv.config();\n\nconst pool = mysql.createPool({\n  host: process.env.DB_HOST || '127.0.0.1',\n  user: process.env.DB_USER || 'exam_user',\n  password: process.env.DB_PASSWORD || 'exam_password',\n  port: parseInt(process.env.DB_PORT, 10) || 3307,\n  database: process.env.DB_NAME || 'ideas_bank',\n  waitForConnections: true,\n  connectionLimit: 10,\n  queueLimit: 0\n});\n\n(async () => {\n  try {\n    const connection = await pool.getConnection();\n    console.log(`✅ Connected to ${process.env.DB_NAME || 'ideas_bank'} database`);\n    connection.release();\n  } catch (err) {\n    console.error('❌ Database connection failed:', err.message);\n  }\n})();\n\nexport default pool;\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,uIAAA,CAAA,UAAM,CAAC,MAAM;AAEb,MAAM,OAAO,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;IAC5B,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,UAAU,QAAQ,GAAG,CAAC,WAAW,IAAI;IACrC,MAAM,SAAS,QAAQ,GAAG,CAAC,OAAO,EAAE,OAAO;IAC3C,UAAU,QAAQ,GAAG,CAAC,OAAO,IAAI;IACjC,oBAAoB;IACpB,iBAAiB;IACjB,YAAY;AACd;AAEA,CAAC;IACC,IAAI;QACF,MAAM,aAAa,MAAM,KAAK,aAAa;QAC3C,QAAQ,GAAG,CAAC,CAAC,eAAe,EAAE,QAAQ,GAAG,CAAC,OAAO,IAAI,aAAa,SAAS,CAAC;QAC5E,WAAW,OAAO;IACpB,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,iCAAiC,IAAI,OAAO;IAC5D;AACF,CAAC;uCAEc","debugId":null}},
    {"offset": {"line": 218, "column": 0}, "map": {"version":3,"sources":["file:///C:/Projects/ideas_bank/src/lib/cryptoUtil.js"],"sourcesContent":["\nexport function encrypt(text) {\n  return Buffer.from(String(text).toString(), 'utf8').toString('base64');\n}\n\nexport function decrypt(encodedText) {\n  return Buffer.from(encodedText, 'base64').toString('utf8');\n}"],"names":[],"mappings":";;;;AACO,SAAS,QAAQ,IAAI;IAC1B,OAAO,OAAO,IAAI,CAAC,OAAO,MAAM,QAAQ,IAAI,QAAQ,QAAQ,CAAC;AAC/D;AAEO,SAAS,QAAQ,WAAW;IACjC,OAAO,OAAO,IAAI,CAAC,aAAa,UAAU,QAAQ,CAAC;AACrD","debugId":null}},
    {"offset": {"line": 232, "column": 0}, "map": {"version":3,"sources":["file:///C:/Projects/ideas_bank/src/lib/traineeUtils.js"],"sourcesContent":["import { decrypt } from './cryptoUtil';\n\n/**\n * Standardized utility functions for trainee ID handling\n * Addresses inconsistent field mapping across the application\n */\n\n/**\n * Extract trainee ID from various possible field names\n * @param {Object} data - Object that might contain trainee ID in various field names\n * @returns {string|number|null} - Trainee ID or null if not found\n */\nexport function extractTraineeId(data) {\n  if (!data || typeof data !== 'object') {\n    return null;\n  }\n\n  // Try different possible field names in order of preference\n  const possibleFields = [\n    'traineeId',  // Our standardized field name\n    'id',         // Most common\n    'ID',         // Sometimes uppercase\n    'SN',         // Serial Number from database\n    'sn',         // Lowercase version\n    'trainee_sn', // Alternative database field\n    'trainee_id', // Alternative field name\n  ];\n\n  for (const field of possibleFields) {\n    if (data[field] != null && data[field] !== '') {\n      return data[field];\n    }\n  }\n\n  return null;\n}\n\n/**\n * Get trainee ID from URL search params with decryption support\n * @param {URLSearchParams} searchParams - URL search parameters\n * @param {string} paramName - Parameter name to look for (default: 'traineeId')\n * @param {boolean} encrypted - Whether the ID is encrypted (default: false)\n * @returns {string|null} - Trainee ID or null if not found\n */\nexport function getTraineeIdFromParams(searchParams, paramName = 'traineeId', encrypted = false) {\n  if (!searchParams) return null;\n\n  // Try different parameter names\n  const possibleParams = [paramName, 'id', 'traineeId'];\n  \n  for (const param of possibleParams) {\n    const value = searchParams.get(param);\n    if (value) {\n      try {\n        return encrypted ? decrypt(value) : value;\n      } catch (error) {\n        console.error(`Error decrypting trainee ID from param ${param}:`, error);\n        // If decryption fails, try returning the raw value\n        return value;\n      }\n    }\n  }\n\n  return null;\n}\n\n/**\n * Get trainee ID from localStorage with fallback options\n * @returns {string|null} - Trainee ID or null if not found\n */\nexport function getTraineeIdFromStorage() {\n  if (typeof window === 'undefined') return null;\n\n  try {\n    // First try the dedicated traineeId storage\n    const directId = localStorage.getItem('traineeId');\n    if (directId) return directId;\n\n    // Fallback to extracting from stored data\n    const storedData = localStorage.getItem('data');\n    if (storedData) {\n      const parsed = JSON.parse(storedData);\n      return extractTraineeId(parsed);\n    }\n  } catch (error) {\n    console.error('Error reading trainee ID from localStorage:', error);\n  }\n\n  return null;\n}\n\n/**\n * Store trainee ID in localStorage with standardized key\n * @param {string|number} traineeId - Trainee ID to store\n * @param {Object} additionalData - Additional data to store alongside ID\n */\nexport function storeTraineeId(traineeId, additionalData = null) {\n  if (typeof window === 'undefined') return;\n\n  try {\n    if (traineeId != null && traineeId !== '') {\n      localStorage.setItem('traineeId', String(traineeId));\n      \n      if (additionalData) {\n        const existingData = localStorage.getItem('data');\n        const dataToStore = existingData ? \n          { ...JSON.parse(existingData), ...additionalData, traineeId } :\n          { ...additionalData, traineeId };\n        \n        localStorage.setItem('data', JSON.stringify(dataToStore));\n      }\n    }\n  } catch (error) {\n    console.error('Error storing trainee ID:', error);\n  }\n}\n\n/**\n * Validate trainee ID format\n * @param {any} traineeId - ID to validate\n * @returns {boolean} - Whether the ID is valid\n */\nexport function isValidTraineeId(traineeId) {\n  if (traineeId == null || traineeId === '') {\n    return false;\n  }\n\n  const stringId = String(traineeId).trim();\n  \n  // Check if it's a valid number or non-empty string\n  return stringId.length > 0 && !isNaN(Number(stringId));\n}\n\n/**\n * Normalize trainee ID to a consistent format\n * @param {any} traineeId - ID to normalize\n * @returns {number|null} - Normalized ID as number or null if invalid\n */\nexport function normalizeTraineeId(traineeId) {\n  if (!isValidTraineeId(traineeId)) {\n    return null;\n  }\n\n  const numericId = Number(traineeId);\n  return isNaN(numericId) ? null : numericId;\n}\n\n/**\n * Build trainee data object with consistent field mapping\n * @param {Object} rawData - Raw data from API or storage\n * @returns {Object} - Normalized trainee data\n */\nexport function normalizeTraineeData(rawData) {\n  if (!rawData || typeof rawData !== 'object') {\n    return {};\n  }\n\n  const traineeId = extractTraineeId(rawData);\n  \n  return {\n    ...rawData,\n    traineeId: normalizeTraineeId(traineeId),\n    // Ensure consistent field names\n    fullname: rawData.fullname || rawData.FullName || rawData.full_name,\n    registrationno: rawData.registrationno || rawData.registrationNo || rawData.registration_no,\n  };\n}"],"names":[],"mappings":";;;;;;;;;AAAA;;AAYO,SAAS,iBAAiB,IAAI;IACnC,IAAI,CAAC,QAAQ,OAAO,SAAS,UAAU;QACrC,OAAO;IACT;IAEA,4DAA4D;IAC5D,MAAM,iBAAiB;QACrB;QACA;QACA;QACA;QACA;QACA;QACA;KACD;IAED,KAAK,MAAM,SAAS,eAAgB;QAClC,IAAI,IAAI,CAAC,MAAM,IAAI,QAAQ,IAAI,CAAC,MAAM,KAAK,IAAI;YAC7C,OAAO,IAAI,CAAC,MAAM;QACpB;IACF;IAEA,OAAO;AACT;AASO,SAAS,uBAAuB,YAAY,EAAE,YAAY,WAAW,EAAE,YAAY,KAAK;IAC7F,IAAI,CAAC,cAAc,OAAO;IAE1B,gCAAgC;IAChC,MAAM,iBAAiB;QAAC;QAAW;QAAM;KAAY;IAErD,KAAK,MAAM,SAAS,eAAgB;QAClC,MAAM,QAAQ,aAAa,GAAG,CAAC;QAC/B,IAAI,OAAO;YACT,IAAI;gBACF,OAAO,YAAY,CAAA,GAAA,0HAAA,CAAA,UAAO,AAAD,EAAE,SAAS;YACtC,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,CAAC,uCAAuC,EAAE,MAAM,CAAC,CAAC,EAAE;gBAClE,mDAAmD;gBACnD,OAAO;YACT;QACF;IACF;IAEA,OAAO;AACT;AAMO,SAAS;IACd,wCAAmC,OAAO;;;AAkB5C;AAOO,SAAS,eAAe,SAAS,EAAE,iBAAiB,IAAI;IAC7D,wCAAmC;;;AAkBrC;AAOO,SAAS,iBAAiB,SAAS;IACxC,IAAI,aAAa,QAAQ,cAAc,IAAI;QACzC,OAAO;IACT;IAEA,MAAM,WAAW,OAAO,WAAW,IAAI;IAEvC,mDAAmD;IACnD,OAAO,SAAS,MAAM,GAAG,KAAK,CAAC,MAAM,OAAO;AAC9C;AAOO,SAAS,mBAAmB,SAAS;IAC1C,IAAI,CAAC,iBAAiB,YAAY;QAChC,OAAO;IACT;IAEA,MAAM,YAAY,OAAO;IACzB,OAAO,MAAM,aAAa,OAAO;AACnC;AAOO,SAAS,qBAAqB,OAAO;IAC1C,IAAI,CAAC,WAAW,OAAO,YAAY,UAAU;QAC3C,OAAO,CAAC;IACV;IAEA,MAAM,YAAY,iBAAiB;IAEnC,OAAO;QACL,GAAG,OAAO;QACV,WAAW,mBAAmB;QAC9B,gCAAgC;QAChC,UAAU,QAAQ,QAAQ,IAAI,QAAQ,QAAQ,IAAI,QAAQ,SAAS;QACnE,gBAAgB,QAAQ,cAAc,IAAI,QAAQ,cAAc,IAAI,QAAQ,eAAe;IAC7F;AACF","debugId":null}},
    {"offset": {"line": 328, "column": 0}, "map": {"version":3,"sources":["file:///C:/Projects/ideas_bank/src/app/api/trainee/%5Bid%5D/route.js"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport pool from '@/lib/db';\nimport { normalizeTraineeId, isValidTraineeId, normalizeTraineeData } from '@/lib/traineeUtils';\n\nexport async function GET(request, { params }) {\n  const { id } = await params;\n  \n  // Validate and normalize trainee ID\n  const traineeId = normalizeTraineeId(id);\n  if (!isValidTraineeId(traineeId)) {\n    return NextResponse.json(\n      { error: 'Valid trainee ID is required' },\n      { status: 400 }\n    );\n  }\n\n  try {\n    const [trainee] = await pool.query( \n      `SELECT * FROM trainees WHERE id = ?`,\n      [traineeId]\n    );\n\n    if (trainee.length === 0) {\n      return NextResponse.json(\n        { error: 'Trainee not found' },\n        { status: 404 }\n      );\n    }\n\n    // Normalize the trainee data for consistent field mapping\n    const rawTraineeData = trainee[0];\n    const normalizedData = normalizeTraineeData({\n      ...rawTraineeData,\n      // Map internship fields for backward compatibility\n      HaveStarted: rawTraineeData.has_started_internship === 1,\n      AcceptanceLetter: rawTraineeData.internship_letter_url || '',\n      hascompleted: rawTraineeData.has_completed_internship === 1,\n      completionLetter: rawTraineeData.completion_letter_url || ''\n    });\n\n    return NextResponse.json(normalizedData);\n\n  } catch (error) {\n    console.error('Get trainee error:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function PUT(request, { params }) {\n  try {\n    const { id } = await params;\n    const data = await request.json();\n\n    // Validate and normalize trainee ID\n    const traineeId = normalizeTraineeId(id);\n    if (!isValidTraineeId(traineeId)) {\n      return NextResponse.json(\n        { error: 'Valid trainee ID is required' },\n        { status: 400 }\n      );\n    }\n\n    const connection = await pool.getConnection();\n    \n    try {\n      await connection.beginTransaction();\n\n      // Update trainee verification information\n      await connection.query(\n        `UPDATE trainees SET \n        nin = ?, date_of_birth = ?\n        WHERE id = ?`,\n        [\n          data.nin, data.date_of_birth,\n          traineeId\n        ]\n      );\n\n      await connection.commit();\n\n      return NextResponse.json(\n        { \n          message: 'Trainee verification information updated successfully',\n          traineeId: traineeId \n        },\n        { status: 200 }\n      );\n\n    } catch (error) {\n      await connection.rollback();\n      throw error;\n    } finally {\n      connection.release();\n    }\n\n  } catch (error) {\n    console.error('Update trainee error:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAEO,eAAe,IAAI,OAAO,EAAE,EAAE,MAAM,EAAE;IAC3C,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM;IAErB,oCAAoC;IACpC,MAAM,YAAY,CAAA,GAAA,4HAAA,CAAA,qBAAkB,AAAD,EAAE;IACrC,IAAI,CAAC,CAAA,GAAA,4HAAA,CAAA,mBAAgB,AAAD,EAAE,YAAY;QAChC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA+B,GACxC;YAAE,QAAQ;QAAI;IAElB;IAEA,IAAI;QACF,MAAM,CAAC,QAAQ,GAAG,MAAM,kHAAA,CAAA,UAAI,CAAC,KAAK,CAChC,CAAC,mCAAmC,CAAC,EACrC;YAAC;SAAU;QAGb,IAAI,QAAQ,MAAM,KAAK,GAAG;YACxB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAoB,GAC7B;gBAAE,QAAQ;YAAI;QAElB;QAEA,0DAA0D;QAC1D,MAAM,iBAAiB,OAAO,CAAC,EAAE;QACjC,MAAM,iBAAiB,CAAA,GAAA,4HAAA,CAAA,uBAAoB,AAAD,EAAE;YAC1C,GAAG,cAAc;YACjB,mDAAmD;YACnD,aAAa,eAAe,sBAAsB,KAAK;YACvD,kBAAkB,eAAe,qBAAqB,IAAI;YAC1D,cAAc,eAAe,wBAAwB,KAAK;YAC1D,kBAAkB,eAAe,qBAAqB,IAAI;QAC5D;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAE3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,sBAAsB;QACpC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF;AAEO,eAAe,IAAI,OAAO,EAAE,EAAE,MAAM,EAAE;IAC3C,IAAI;QACF,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM;QACrB,MAAM,OAAO,MAAM,QAAQ,IAAI;QAE/B,oCAAoC;QACpC,MAAM,YAAY,CAAA,GAAA,4HAAA,CAAA,qBAAkB,AAAD,EAAE;QACrC,IAAI,CAAC,CAAA,GAAA,4HAAA,CAAA,mBAAgB,AAAD,EAAE,YAAY;YAChC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA+B,GACxC;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,aAAa,MAAM,kHAAA,CAAA,UAAI,CAAC,aAAa;QAE3C,IAAI;YACF,MAAM,WAAW,gBAAgB;YAEjC,0CAA0C;YAC1C,MAAM,WAAW,KAAK,CACpB,CAAC;;oBAEW,CAAC,EACb;gBACE,KAAK,GAAG;gBAAE,KAAK,aAAa;gBAC5B;aACD;YAGH,MAAM,WAAW,MAAM;YAEvB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBACE,SAAS;gBACT,WAAW;YACb,GACA;gBAAE,QAAQ;YAAI;QAGlB,EAAE,OAAO,OAAO;YACd,MAAM,WAAW,QAAQ;YACzB,MAAM;QACR,SAAU;YACR,WAAW,OAAO;QACpB;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}